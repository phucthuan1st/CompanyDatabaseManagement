CREATE OR REPLACE VIEW USER_LIST AS 
SELECT USER_ID, USERNAME, ACCOUNT_STATUS, LAST_LOGIN 
FROM DBA_USERS;
/

CREATE OR REPLACE VIEW ROLE_LIST AS 
SELECT ROLE_ID, ROLE, AUTHENTICATION_TYPE, COMMON 
FROM DBA_ROLES;
/

CREATE OR REPLACE VIEW TABLE_LIST AS 
SELECT TABLE_NAME, OWNER, STATUS, NUM_ROWS 
FROM DBA_TABLES;
/

CREATE OR REPLACE VIEW VIEW_LIST AS 
SELECT OWNER, VIEW_NAME, EDITIONING_VIEW, READ_ONLY, HAS_SENSITIVE_COLUMN
FROM DBA_VIEWS;
/

CREATE OR REPLACE PROCEDURE CREATE_USER(USER_NAME VARCHAR2, PASS VARCHAR2)
AS
    strSQL VARCHAR2(3000);
BEGIN
    strSQL := 'ALTER SESSION SET "_ORACLE_SCRIPT"=TRUE';
    EXECUTE IMMEDIATE (strSQL);
    strSQL := ' CREATE USER ' || USER_NAME|| ' IDENTIFIED BY '||PASS;
    EXECUTE IMMEDIATE (strSQL);
    strSQL := ' GRANT CONNECT TO ' || USER_NAME ;
    EXECUTE IMMEDIATE (strSQL);
    strSQL := 'ALTER SESSION SET "_ORACLE_SCRIPT"=FALSE';
    EXECUTE IMMEDIATE (strSQL);
END;
/

CREATE OR REPLACE PROCEDURE CREATE_ROLE( ROLE_NAME VARCHAR2)
AS
    strSQL VARCHAR2(3000);
BEGIN
    strSQL := 'ALTER SESSION SET "_ORACLE_SCRIPT"=TRUE';
    EXECUTE IMMEDIATE (strSQL);
    strSQL := ' CREATE ROLE ' || ROLE_NAME;
    EXECUTE IMMEDIATE (strSQL);
    strSQL := 'ALTER SESSION SET "_ORACLE_SCRIPT"=FALSE';
    EXECUTE IMMEDIATE (strSQL);
    
END;
/

CREATE OR REPLACE VIEW TABLE_PRIVILEGES AS
SELECT GRANTEE, GRANTOR, TABLE_NAME, GRANTABLE, PRIVILEGE 
FROM DBA_TAB_PRIVS 
WHERE TYPE='TABLE';
/

CREATE OR REPLACE VIEW ROLE_PRIVILEGES AS 
SELECT GRANTEE, GRANTED_ROLE, ADMIN_OPTION FROM DBA_ROLE_PRIVS;
/

CREATE OR REPLACE PROCEDURE DROP_TABLE_IF_EXISTS( NAME_OF_TABLE VARCHAR2)
as
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE ' || NAME_OF_TABLE;
    EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('TABLE IS NOT EXISTS');
END;
/

CREATE OR REPLACE FUNCTION GET_TABLE_COLUMNS( NAME_OF_TABLE VARCHAR2) 
RETURN CLOB SQL_MACRO 
AS 
    stmt CLOB;
BEGIN
       stmt := 'SELECT COLUMN_NAME FROM ALL_TAB_COLUMNS WHERE TABLE_NAME = NAME_OF_TABLE';
       
       RETURN stmt;
END;
/

CREATE OR REPLACE FUNCTION IDENTIFY_ENTITY_TYPE( ENTITY_NAME VARCHAR2) 
RETURN VARCHAR2
AS
    CURSOR C_USER IS SELECT USERNAME FROM USER_LIST;
    CURSOR C_ROLE IS SELECT ROLE FROM ROLE_LIST;
BEGIN
    FOR USR IN C_USER LOOP
        IF USR.USERNAME = ENTITY_NAME THEN
            RETURN 'USER';
        END IF;
    END LOOP;
    
    FOR R IN C_ROLE LOOP
        IF R.ROLE = ENTITY_NAME THEN
            RETURN 'ROLE';
        END IF;
    END LOOP;
    
    RETURN 'NOT A USER OR ROLE';
END;
/

CREATE OR REPLACE PROCEDURE GRANT_ROLE_TO_USER(
    USERNAME VARCHAR2,
    ROLENAME VARCHAR2
)
AS
BEGIN
    IF IDENTIFY_ENTITY_TYPE(USERNAME) <> 'USER' THEN
        RETURN;
    END IF;
    
    IF IDENTIFY_ENTITY_TYPE(ROLENAME) <> 'ROLE' THEN
        RETURN;
    END IF;
    
    EXECUTE IMMEDIATE 'GRANT ' || ROLENAME || ' TO ' || USERNAME;
END;
/

CREATE OR REPLACE PROCEDURE REVOKE_ROLE_FROM_USER(
    USERNAME VARCHAR2,
    ROLENAME VARCHAR2
)
AS
BEGIN
    IF IDENTIFY_ENTITY_TYPE(USERNAME) <> 'USER' THEN
        RETURN;
    END IF;
    
    IF IDENTIFY_ENTITY_TYPE(ROLENAME) <> 'ROLE' THEN
        RETURN;
    END IF;
    
    EXECUTE IMMEDIATE 'REVOKE ' || ROLENAME || ' FROM ' || USERNAME;
END;
/

COMMIT;